kubectl run nginx --image=nginx
kuebctl get pods
kubectl get pods -o wide
kubectl create -f pod-nginx.yml
kubectl describe pod nginx-pod
kubectl apply -f 2-multi-container-pod.yaml (For creating new object create and apply works same)
kubectl get replicationcontroller
kubectl get rc
kubectl get repliaset
kubectl get rs 
kubectl replace -f replicaset.yaml (To update or replace replicaset)
kubectl scale --replicas=6 -f replicaset.yaml
kubectl scale --replicas=6 replicaset myapp-replicaset
kubectl delete replicaset myapp-replicaset (Also deletes all underlying pods)
kubectl edit replicaset new-replica-set
kubectl explain replicaset
kubectl get all
kubectl create deployment --image=httpd:2.4-alpine httpd-frontend --replicas=3
kubectl create deployment --image=httpd:2.4-alpine httpd-frontend --replicas=3 --dry-run=client -o yaml
kubectl create deployment --image=httpd:2.4-alpine httpd-frontend --replicas=3 --dry-run=client -o yaml > deployment.yaml
kubectl create deploy --help
kubectl get svc
kubectl describe svc myapp-service
kubectl explain service
kubectl get pods --namespace=kube-system
kubectl get pods -n kube-system
kubectl create ns dev
kubectl run nginx --image=nginx -n dev
kubectl explain namespace 
kubectl config set-context $(kubectl config current-context) --namespace=dev
kuebctl get pods --all-namespaces
kuebctl get pods -A
kubectl describe ns dev
kubectl get resourcequota -n dev
kubectl expose deployment nginx --port 80
kubectl edit deployment nginx
kubectl set image deployment nginx nginx=nginx:1.18
kubectl delete -f nginx.yaml
kubectl replace --force -f nginx.yaml (Delete the pod and then recreate it)
kubectl apply -f /path/to/config-files (directory where all object files present and you want to create at once)
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
kubectl expose pod redis --name=redis-service --port=6379
kubectl run custom-nginx --image=nginx --port=8080
kubectl run httpd --image=httpd:alpine --port=80 --expose=true (Create pod and service at the same time)
kubectl get pods --selector app=App1
kubectl get pod --selector env=prod,bu=finance,tier=frontend
kubectl get pods --selector app=App1 --no-headers
kubectl get pods --selector app=App1 --no-headers | wc -l
kubectl get all --selector app=App1 --no-headers | wc -l
kubectl taint node node1 app=blue:NoSchedule
kubectl describe node master | grep Taint
kubectl describe node controlplane | grep -i taint
kubectl taint nodes controlplane node-role.kubernetes.io/control-plane:NoSchedule-
kubectl label node node01 color=blue
kubectl create deploy blue --image=nginx --replicas=3
kuebctl get limitranges
kubectl describe limitranges cpu-memory-resource-constraint
kubectl explain resourcequota
kubectl get resourcequota (this command will show how much is already used and how much is free)
kubectl describe resourcequota my-resource-quota
kubectl get daemonset
kubectl get ds 
kubectl describe daemonset nginx-daemonset
kubectl run static-busybox --image=busybox --dry-run=client -o yaml --command -- sleep 1000 (Do not add other options after command --, otherwise that will also recognized as a command)
kubectl run static-busybox --image=busybox --dry-run=client -o yaml --command -- sleep 1000 > busybox.yaml
kubectl config current-context (Check on which cluster you are currently logged-in)
kubectl get events -o wide (List all the events in current namespace)
kubectl get clusterrolebinding my-scheduler-as-kube-scheduler my-scheduler-as-volume-scheduler -n kube-system
kubectl get sa my-scheduler -n kube-system
kubectl get configmap -n kube-system
kubectl describe configmap my-scheduler-config -n kube-system
kubectl create configmap my-scheduler-config --from-file=/root/my-scheduler-config.yaml -n kube-system
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
kubectl delete -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
kubectl top node (CPU and Memory consumption of each node)
kubectl top pod (CPU and Memory consumption of each pod)
kubectl logs nginx-pod
kubectl logs -f nginx-pod (Stream live logs)
kubectl logs -f nginx-pod nginx-container
kubectl rollout status deployment/myapp-deployment
kubectl rollout history deployment/myapp-deployment
kuebctl rollout undo deployment/myapp-deployment
kubectl set image deployment/myapp-deployment nginx-container=nginx:1.9.1
kubectl run webapp-green --image=kodecloud/webapp-green -- --color=green
kubectl run webapp-green --image=kodecloud/webapp-green --command -- python app2.py --color=green
kubectl create configmap app-config --from-literal=APP_COLOR=blue --from-literal=APP_MOD=prod
kubectl create configmap app-config --from-file=app_config.properties
kubectl get configmaps
kubectl describe configmap webapp-config
echo -n 'mysql' | base64
kubectl create secret generic app-secret --from-literal=DB_Host=mysql --from-literal=DB_User=root --from-literal=DB_Password=paswrd
kuebctl create secret generic app-secret --from-file=app_secret.properties
kubectl get secret
kubectl describe secret app-secret
kubectl get secret app-secret -o yaml
echo -n 'bXlzcWw=' | base64 --decode 
ETCDCTL_API=3 etcdctl    --cacert=/etc/kubernetes/pki/etcd/ca.crt      --cert=/etc/kubernetes/pki/etcd/server.crt    --key=/etc/kubernetes/pki/etcd/server.key     get /registry/secrets/default/app-secret | hexdump -C
kubectl -n elastic-stack exec app -- cat /log/app.log
kubectl logs orange -c init-myservice
kubectl describe node worker1
kubectl get nodes
kubectl drain worker --ignore-daemonsets --force
kubectl cordon worker1
kubectl config view 
kubectl config view | grep namespace

